<?
import numpy as np
amplitude_1 = np.array([0, 1, 0])
amplitude_2 = np.array([1, 0, 0])
nSuperspace = np.real(keys['mat_superspace'].getNKdata(
                                                    keys['vacuum_wavelength']))
k_vector = np.array([0, 0, -2*np.pi/keys['vacuum_wavelength'] * nSuperspace])
theta = np.deg2rad(keys['theta'])
phi = np.deg2rad(keys['phi'])
A = np.array([ [np.cos(theta), 0, np.sin(theta)], [0, 1, 0], [-np.sin(theta), 0, np.cos(theta)] ])
B = np.array([ [np.cos(phi), np.sin(phi), 0], [-np.sin(phi), np.cos(phi), 0], [0, 0, 1] ])

keys['strength_1'] = np.dot(np.dot(B,A),amplitude_1).T
keys['strength_2'] = np.dot(np.dot(B,A),amplitude_2).T
keys['k_vec'] = np.dot(np.dot(B,A),k_vector).T

?>
SourceBag { # S
  Source {
    ElectricFieldStrength {
      PlaneWave {
        K = %(k_vec)e
        Amplitude = %(strength_1)e
      }
    }
  }
}
SourceBag { # P
  Source {
    ElectricFieldStrength {
      PlaneWave {
        K = %(k_vec)e
        Amplitude = %(strength_2)e
      }
    }
  }
}
